package lar.telas;

import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import lar.dal.Rdb;
import lar.entidade.Database;
import static lar.telas.FrmEscolherBancoDeDados.bdSession;
import lar.util.global;

/**
 *
 * @author renato
 */
public class FrmChooseDatabase extends javax.swing.JFrame {

    private boolean statusFieldsRequireds = true;
    public DefaultListModel listModel;
    public DefaultTreeModel arvBaseDeDados;
    public static Database bdSession;
    public static String nomeBD;

    public DefaultListModel getListModel() {
        return listModel;
    }
    public DefaultTreeModel getArvBaseDeDados(){
        return arvBaseDeDados;
    }
    
    public FrmChooseDatabase() {
        initComponents();
        this.loadCombobox();
        
        listModel = new DefaultListModel();
        arvBaseDeDados = new DefaultTreeModel(new DefaultMutableTreeNode());
    }
    
    
    /**Retorna a base de dados com as crendeciais de acesso
     * @return BancoDeDados.
     */
    public Database getEntidade() {
        Database bd = new Database();

        if (this.cbDbServer.getSelectedItem() != "") {
            String itemCombo = this.cbDbServer.getSelectedItem().toString();
            if (!"".equals(itemCombo)) {
                if (global.SGBDs[1].equals(itemCombo)) {
                    bd.setServer(global.SGBDs[1]);
                    bd.setURL(global.MYSQL_URL);
                    this.txtURL.setText(global.MYSQL_URL);
                }
                if (global.SGBDs[2].equals(itemCombo)) {
                    bd.setServer(global.SGBDs[2]);
                    bd.setURL(global.POSTGRES_URL);
                    this.txtURL.setText(global.POSTGRES_URL);
                }
            }
        } else {
            statusFieldsRequireds = false;
        }
        if (!"".equals(this.txtDatasetName.getText())) {
            bd.setName(this.txtDatasetName.getText());
        } else {
            statusFieldsRequireds = false;
        }
        if (!"".equals(this.txtUserName.getText())) {
            bd.setUser(this.txtUserName.getText());
        } else { 
            statusFieldsRequireds = false;
        }
        String pwd = new String(this.txtPassword.getPassword());
        if (!"".equals(pwd)) {
            bd.setPassword(pwd);
        } else {
            statusFieldsRequireds = false;
        }
        bdSession = bd;
        return bd;
    }
    
    
    
    
    /*Eventos*/
    private void loadCombobox() {
        for (String SGBD : global.SGBDs){
            this.cbDbServer.addItem(SGBD); 
        }
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbDbServer = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDatasetName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnOk = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SADIS");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Database"));

        jLabel1.setText("Database Server");

        cbDbServer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDbServerItemStateChanged(evt);
            }
        });

        jLabel2.setText("URL");

        jLabel3.setText("Dataset Name");

        jLabel4.setText("User Name");

        jLabel5.setText("Password");

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtURL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(cbDbServer, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtDatasetName)
                    .addComponent(jLabel4)
                    .addComponent(txtUserName)
                    .addComponent(jLabel5)
                    .addComponent(txtPassword)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClose, btnOk});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDbServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDatasetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnClose))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(364, 434));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        Database bd = this.getEntidade();

        if (statusFieldsRequireds) {
            List<String> tb = Rdb.getTables(bd);
            
            if (tb != null) {
                Iterator it_tab = tb.iterator();

                DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(bd.getName());

                while (it_tab.hasNext()) {
                    String tableName = (String) it_tab.next();
                    System.out.println("[*** Table]" + tableName);

                    Rdb.getPKOfTable(tableName);
                    Rdb.getColumnsOfTable(tableName);
                    DefaultMutableTreeNode tabela = new DefaultMutableTreeNode(tableName);

                    for (String col : Rdb.columns) {
                        System.out.println("\t[*** Colunas]" + col);

                        for (String pk : Rdb.pks) {

                            if (pk.equals(col)) {
                                System.out.println("\t\t[*** pk]: " + pk);
                                listModel.addElement(tableName + ":" + col + " (pk)");
                                DefaultMutableTreeNode coluna = new DefaultMutableTreeNode(col + " (pk)");
                                tabela.add(coluna);
                            } else {
                                listModel.addElement(tableName + ":" + col);
                                DefaultMutableTreeNode coluna = new DefaultMutableTreeNode(col);
                                tabela.add(coluna);
                            }
                        }
                    }
                    raiz.add(tabela);
                }
                arvBaseDeDados.setRoot(raiz);

                JOptionPane.showMessageDialog(null, "Successful Connection!");
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Was not possible find the dataset!");
            }
        } else {
            global.exibeMenssagemDeErro();
            statusFieldsRequireds = true;
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**Add Database URL in txtURL*/
    private void cbDbServerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDbServerItemStateChanged
        if (this.cbDbServer.getSelectedItem() != "") {
            String itemCombo = this.cbDbServer.getSelectedItem().toString();
            if (global.SGBDs[1].equals(itemCombo)) {
                this.txtURL.setText(global.MYSQL_URL);
            }
            if (global.SGBDs[2].equals(itemCombo)) {
                this.txtURL.setText(global.POSTGRES_URL);
            }
        } 
    }//GEN-LAST:event_cbDbServerItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmChooseDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmChooseDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmChooseDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmChooseDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmChooseDatabase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox<String> cbDbServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDatasetName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtURL;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
