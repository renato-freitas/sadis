/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lar.telas;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import lar.entidade.Assertion;
import lar.jena.Ontology;
import lar.util.global;
import org.apache.jena.ontology.DatatypeProperty;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.ontology.OntModel;

/**
 * @author Renato Freitas
 * @since 27/06/2018
 */
public class SidaUI extends javax.swing.JFrame {

    
    public static String nomeDaOD = "File Name";
    public static OntModel ontologiaDeDominio;
    public static String urlDaOD = "";
    public static String colunasParaSQL = "";
    private String assertBD = "";
    private String assertOD = "";
    public static List<Assertion> listaDosAsserts;


    public SidaUI() {
        initComponents();
        arvBD.setModel(null);
        arvOD.setModel(null);
        listaDosAsserts = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAbrirOD = new javax.swing.JButton();
        btnAbrirBD = new javax.swing.JButton();
        txtOD = new javax.swing.JTextField();
        txtDB = new javax.swing.JTextField();
        lblDataset = new javax.swing.JLabel();
        lblOD = new javax.swing.JLabel();
        txtAsserts = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        arvOD = new javax.swing.JTree();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        arvBD = new javax.swing.JTree();
        btnAbrirFrmAssertions = new javax.swing.JButton();
        btnLinkSpec = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapping Dataset to Source Ontogy"));
        jPanel1.setPreferredSize(new java.awt.Dimension(1009, 561));

        btnAbrirOD.setText("Open Domain Ontology");
        btnAbrirOD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirODActionPerformed(evt);
            }
        });

        btnAbrirBD.setText("Open Database");
        btnAbrirBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirBDActionPerformed(evt);
            }
        });

        txtOD.setEditable(false);

        txtDB.setEditable(false);

        lblDataset.setText("Dataset (Schema)");

        lblOD.setText("Domain Ontology (Vocabulary)");

        btnSalvar.setText("Save Assertions");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        arvOD.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arvODValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(arvOD);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        arvBD.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arvBDValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(arvBD);

        btnAbrirFrmAssertions.setText("See All Assertions");
        btnAbrirFrmAssertions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirFrmAssertionsActionPerformed(evt);
            }
        });

        btnLinkSpec.setText("Link Specification");
        btnLinkSpec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinkSpecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtAsserts, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvar)
                        .addGap(96, 96, 96)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDataset))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOD)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAbrirOD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAbrirBD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtOD, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDB, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAbrirFrmAssertions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnLinkSpec, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAbrirBD, btnAbrirOD, txtDB, txtOD});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataset)
                    .addComponent(lblOD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAbrirOD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnAbrirBD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAbrirFrmAssertions)
                        .addGap(18, 18, 18)
                        .addComponent(btnLinkSpec)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAsserts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar)
                    .addComponent(btnExit)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1100, 615));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*Abre o Banco de Dados.*/
    private void btnAbrirBDActionPerformed(java.awt.event.ActionEvent evt) {
       
        //Necessário instanciar
        FrmEscolherBancoDeDados frmBD = new FrmEscolherBancoDeDados();
        frmBD.setVisible(true);
        
        txtDB.setText(global.NOME_BD_MYSQL);
        arvBD.setModel(frmBD.arvBaseDeDados);
        mudaIcone(arvBD);
    }

    

    /**Abre a Ontologia de Domínio escolhida.*/
    private void btnAbrirODActionPerformed(java.awt.event.ActionEvent evt) {
        File f;
        try {
            f = global.chooseFile();
            nomeDaOD = f.getName();

            OntModel od = Ontology.getOntology(f);
            ontologiaDeDominio = od; // Armazena a OD durante toda a aplicação.
            
            urlDaOD = od.getNsPrefixURI("");
            this.txtOD.setText(nomeDaOD);
            this.preencherArvoreDaOD(od, nomeDaOD);
        } catch (FileNotFoundException e) {}
    }

    private void arvBDValueChanged(javax.swing.event.TreeSelectionEvent evt) {
        assertBD = "";
        assertBD = arvBD.getSelectionPath().toString();
        txtAsserts.setText(assertBD);
    }

    private void arvODValueChanged(javax.swing.event.TreeSelectionEvent evt) {
        assertOD = "";
        assertOD = arvOD.getSelectionPath().toString();
        txtAsserts.setText(assertBD+" --> "+assertOD);
        txtAsserts.setBackground(Color.GREEN);
    }

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {
        Assertion assertion = new Assertion();
        assertion.setOrigem(assertBD);
        assertion.setAlvo(assertOD);
        
        System.out.println("[***Assertion]"+assertion.getOrigem() + assertion.getAlvo());
        listaDosAsserts.add(assertion);
        this.txtAsserts.setBackground(Color.WHITE);
        this.txtAsserts.setText("");
    }

    /** Chama a tela de Visualização das asserções. */
    private void btnAbrirFrmAssertionsActionPerformed(java.awt.event.ActionEvent evt) {
        new FrmGerarR2RMLPorAssertions().setVisible(true);
    }

    /** Chama a tela de especificação dos links semânticos. */
    private void btnLinkSpecActionPerformed(java.awt.event.ActionEvent evt) {
        new FrmResolucaoIdentidade().setVisible(true);
     
    }

    /** Preencher a árvoe da Ontologia de Domínio. */
    private void preencherArvoreDaOD(OntModel ontologia, String nomeArquivo) {
        //nó raiz
        DefaultMutableTreeNode onto = new DefaultMutableTreeNode(nomeArquivo);

        DefaultMutableTreeNode classes = new DefaultMutableTreeNode("Classes");
        DefaultMutableTreeNode propriedades = new DefaultMutableTreeNode("Properties");
        DefaultMutableTreeNode dados = new DefaultMutableTreeNode("Datatype");

        Ontology.getClasses(ontologia).stream().map((classe) -> {
            System.out.println("[*** OntClass within tree]" + classe.getLocalName());
            return classe;
        }).map((classe) -> new DefaultMutableTreeNode(classe.getLocalName())).forEachOrdered((cls) -> {
            classes.add(cls);
        });
        Ontology.getProperties(ontologia).stream().map((propObjeto) -> new DefaultMutableTreeNode(propObjeto)).forEachOrdered((po) -> {
            propriedades.add(po);
        });
        for (DatatypeProperty dado : Ontology.getDatatypes(ontologia)) {
            System.out.println(global.printTab("Datatypes da ontologia "+dado.toString()));
            String d = dado.toString();
            
//          usar map<String prefixo, String url> aqui.
            String pre = this.retornaPrefixoNS(d, ontologia);
            System.out.println(global.printTab("prefixo encontrado: "+pre));
            
            DefaultMutableTreeNode dp = new DefaultMutableTreeNode(pre);
            dados.add(dp);
        }
        onto.add(classes);
        onto.add(propriedades);
        onto.add(dados);
        
        DefaultTreeModel arvoreOD = new DefaultTreeModel(onto);

        this.arvOD.setModel(arvoreOD);
    }

    /** Este método adicionar um ícone ao nó correspondente.
     * @param tree - Árvore
     */
    public void mudaIcone(JTree tree) {
        tree.setCellRenderer(new DefaultTreeCellRenderer() {
            private final Icon pkIcon = new ImageIcon(getClass().getResource("/lar/resources/img/pk.png"));
            private final Icon setaDireitaIcon = new ImageIcon(getClass().getResource("/lar/resources/img/seta_direita.png"));

            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value,
                    boolean selected, boolean expanded, boolean isLeaf, int row,
                    boolean focused) {
                Component componente = super.getTreeCellRendererComponent(tree, value, selected,
                        expanded, isLeaf, row, focused);
                if (value.toString().contains("(pk)")) {
                    setIcon(pkIcon);
                } else if (isLeaf == true) {
                    setIcon(setaDireitaIcon);
                }
                return componente;
            }
        });
    }
    
    /**
     * Retorna o prefixo do NameSpace
     * @param datatype url do DatatypeProperty.
     * @param od Ontologia de Domínio.
     * @return O prefixo do NameSpace definido na OD.
     */
    private String retornaPrefixoNS(String datatype, OntModel od) {
        String prefixo = "";
        String url = "";
        String prop = "";
        if (!datatype.contains("#")) {
//            url = datatype.substring(0, datatype.lastIndexOf('/') + 1);
//            prop = datatype.substring(datatype.lastIndexOf('/') + 1, datatype.length());
            url = global.cortaAte(datatype, '/');
            prop = global.cortaDepoisDe(datatype, '/');

        } else {
//            url = datatype.substring(0, datatype.lastIndexOf('#') + 1);
//            prop = datatype.substring(datatype.lastIndexOf('#') + 1, datatype.length());
            url = global.cortaAte(datatype, '#');
            prop = global.cortaDepoisDe(datatype, '#');
        }
        System.out.println("url do NameSpace => "+url);
        
        for (Entry<String, String> map : Ontology.getOntologyPrefixies(od).entrySet()) {
            System.out.println(global.printTab("Map<String, String>: "+map.getKey() + ":" + map.getValue()));
            if(map.getValue() == null ? url == null : map.getValue().equals(url)){
                prefixo = map.getKey()+":"+prop;
                System.out.println("Dentro do if => retorno no método retornarPrefixoNs: "+prefixo);
                return prefixo;
            }
        }
        return prefixo;
    }
    
    
   /*Fecha a janela.*/
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SidaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SidaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SidaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SidaUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SidaUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arvBD;
    private javax.swing.JTree arvOD;
    private javax.swing.JButton btnAbrirBD;
    private javax.swing.JButton btnAbrirFrmAssertions;
    private javax.swing.JButton btnAbrirOD;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLinkSpec;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDataset;
    private javax.swing.JLabel lblOD;
    private javax.swing.JTextField txtAsserts;
    private javax.swing.JTextField txtDB;
    private javax.swing.JTextField txtOD;
    // End of variables declaration//GEN-END:variables

    private void TelaEscolherDataset() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
